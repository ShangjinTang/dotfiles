#!/usr/bin/env bash

# Colors
RESET=$(tput sgr0)
# shellcheck disable=SC2034
RED=$(tput setaf 1)
# shellcheck disable=SC2034
GREEN=$(tput setaf 2)
# shellcheck disable=SC2034
YELLOW=$(tput setaf 3)
# shellcheck disable=SC2034
BLUE=$(tput setaf 4)
# shellcheck disable=SC2034
MAGENTA=$(tput setaf 5)
# shellcheck disable=SC2034
CYAN=$(tput setaf 6)
# shellcheck disable=SC2034
ITALIC=$(tput sitm)
# shellcheck disable=SC2034
BOLD=$(tput bold)
# shellcheck disable=SC2034
ITALIC=$(tput sitm)
# shellcheck disable=SC2034
BOLD=$(tput bold)

function print_separate_line() {
    echo "${BLUE}----------------------------------------------------------------------${RESET}"
}

# check & install nerdfonts
function install_nerdfonts() {
    if command -v nerdfont_install &> /dev/null; then
        echo "${BOLD}${GREEN}OK${RESET} ${MAGENTA}nerdfont_install${RESET} available"
        echo "${BLUE}Installing nerdfonts ...${RESET}"
        nerdfont_install "$@"
    else
        echo "${BOLD}${YELLOW}WARNING${RESET} ${MAGENTA}nerdfont_install${RESET} not available"
    fi
}

# check & install fzf
function check_and_install_fzf() {
    if command -v fzf &> /dev/null; then
        echo "${BOLD}${GREEN}OK${RESET} ${MAGENTA}fzf${RESET} available"
    else
        echo "${BOLD}${RED}ERROR${RESET} ${MAGENTA}fzf${RESET} not available"
        if [ -f ~/.fzf/install ]; then
            echo "${BOLD}${GREEN}OK${RESET} ${MAGENTA}~/.fzf/install${RESET} available"
            echo "${BLUE}Installing fzf ...${RESET}"
            ~/.fzf/install --all --no-bash --no-fish
        else
            echo "${BOLD}${CYAN}INFO${RESET} ${MAGENTA}~/.fzf/install${RESET} not available"
        fi
    fi
}

# create symlinks from ~/.dotfiles.*/ to ~/
function create_dotfiles_symlinks() {
    if [ -d ~/.dotfiles.$1 ]; then
        echo "${BOLD}${GREEN}OK${RESET} ${MAGENTA}~/.dotfiles.$1${RESET} exists"
        echo "${BLUE}Create symlinks from ~/.dotfiles.$1/ to ~/${RESET}"
        while IFS= read -r -d '' file; do
            target_file="$(echo $file | sed "s/\.dotfiles\.$1\///")"
            target_dir=$(dirname "$target_file")

            # Check if target directory exists, if not, create it
            if [ ! -d "$target_dir" ]; then
                echo "Creating directory: $target_dir"
                mkdir -p "$target_dir" > /dev/null
            fi

            ln -sf "$file" "$target_file"
        done < <(find ~/.dotfiles.$1 -type f -not -path "*.git*" -not -path "$HOME/.dotfiles.$1/README.md" -print0)
    else
        echo "${BOLD}${CYAN}INFO${RESET} ${MAGENTA}~/.dotfiles.$1${RESET} not exists"
    fi
}

# Function to check and unlink symbolic links pointing to ~/.dotfiles.*/
function unlink_dotfiles_symlinks() {
    echo "${BLUE}Checking and unlinking symlinks pointing to ~/.dotfiles.$1/${RESET}"

    while IFS= read -r -d '' dotfiles_file; do
        home_symlink="$(echo $dotfiles_file | sed "s/\.dotfiles\.$1\///")"

        if [[ -L "${home_symlink}" ]]; then
            if [[ "$(readlink -f "${home_symlink}")" == "${dotfiles_file}" ]]; then
                echo "Removing symbolic link: ${home_symlink}"
                unlink "${home_symlink}"
            fi
        fi
    done < <(find ~/.dotfiles.$1 -type f -not -path "*.git*" -not -path "$HOME/.dotfiles.$1/README.md" -print0)
}

# apply diff files in ~/.dotfiles/submodules_diff/<MODULE_NAME> to ~/.dotfiles/submodules/<MODULE_NAME>
function apply_diff_for_submodule() {
    echo "${BLUE}Executing apply_diff_for_submodule ...${RESET}"
    for folder in "$@"; do
        local source_folder=./submodules_diff/"$folder"
        local diff_list=("$source_folder"/*.diff)
        local target_folder=./submodules/"$folder"
        if [[ -d "$target_folder" ]]; then
            echo "- applying diffs from ${CYAN}${source_folder}${RESET} to repository ${CYAN}$target_folder${RESET}"
            (cd "$target_folder" && git reset --hard HEAD &> /dev/null)
            for diff_file in "${diff_list[@]}"; do
                diff_file_realpath=$(realpath "$diff_file")
                if (cd "$target_folder" && git apply "$diff_file_realpath" &> /dev/null); then
                    echo "  - ${BOLD}${GREEN}OK${RESET} applying ${CYAN}$(basename $diff_file)${RESET} succeeded"
                else
                    echo "  - ${BOLD}${RED}ERROR${RESET} applying ${CYAN}$(basename $diff_file)${RESET} failed"
                fi
            done
        fi
    done
}

function install_cli_prebuilts() {
    if ! [ -d ~/.prebuilts ]; then
        echo "${BOLD}${CYAN}INFO${RESET} ~/.prebuilts not exists"
        if [[ $(uname -s) == "Linux" ]] && [[ $(uname -m) == "x86_64" ]]; then
            echo "- ${BOLD}${CYAN}INFO${RESET} current machine is Linux x86_64, start downloading..."
            echo "- ${MAGENTA}CMD${RESET} git clone https://github.com/ShangjinTang/cli-prebuilts ~/.prebuilts --depth=1"
            git clone https://github.com/ShangjinTang/cli-prebuilts ~/.prebuilts --depth=1 &> /dev/null
            if [ $? -eq 0 ]; then
                echo "- ${BOLD}${GREEN}OK${RESET} git clone succeeded"
            else
                echo "- ${BOLD}${RED}ERROR${RESET} git clone failed"
            fi
        else
            echo "- ${BOLD}${YELLOW}WARNING${RESET} current machine is $(uname -s) $(uname -m), prebuilts current not supported."
        fi
    else
        echo "${BOLD}${GREEN}OK${RESET} ~/.prebuilts exists"
    fi
}

################################################################################

# only install nerdfonts on GUI or WSL
if xset q &> /dev/null || grep -qEi "WSL" /proc/version; then
    print_separate_line &&
        # https://github.com/ryanoasis/nerd-fonts/releases/latest
        install_nerdfonts JetBrainsMono # ComicShannsMono FiraCode MPlus Mononoki RobotoMono SourceCodePro IosevkaTerm UbuntuMono VictorMono GeistMono
fi

print_separate_line &&
    apply_diff_for_submodule fzf ohmyzsh

print_separate_line &&
    create_dotfiles_symlinks "local"

# unlink_dotfiles_symlinks "local"
# unlink_dotfiles_symlinks "private"

print_separate_line &&
    check_and_install_fzf

# print_separate_line &&
#     install_cli_prebuilts

################################################################################
# vim: ft=bash syntax=bash cc=120 tw=119 ts=4 sw=4 sts=4 et sr
